TODO for forgetSQL
==================

 * rollback/commits
   how to do it in programs using forgetSQL?
   how to do it internally?
   
   suggestion:
   Gather related objects in a list, and send the list to some
   commit()-function that can do commit on a large chunk of SQL for
   all the objects.
   
   Objects should remember their old values, this could be
   be used for cases where you change the primary key values (and you'll
   need the old values to run a proper UPDATE).

 * objects should timeout as well, but what should happen?
   raise TimeOutException ? 
   Try a passive reload, and only raise exception if something has
   changed in the database?

 * generator should take parameters for database connection details
 
 * generator should try to fetch table lists from mysql/postgresql
   if possible

 * generated framework (_Wrapper and it's like) needs to be 
   refactored - to make it easier to set database cursor and
   module. Could the set-module be avoided?

   Framework should include the suggestion of specializing in a
   subclassing module - to allow regeneration.
 
 * getAll* should try to use the _cache - but what about
   getAllIterator and the useObject?

   Maybe the getAll-things should be changed, when using getAll but not
   loading datas be appropriate? 

   What about loading data immediately to _values, but skip
   instanciating _userClasses until __getattr__ ?

 * Include attributes in dir()
   -- how to do this? Skip the _values dictionary? 
   use properties.

 * Only fields changed should be stored in an UPDATE

 * connection details should be made easier to set

 * documentation, documentation, documentation!
   More examples, please!
   -- README added, but needs more work
