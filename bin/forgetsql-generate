#!/usr/bin/env python
# *-* encoding: utf8
# 
# Copyright (c) 2002-2006 Stian Soiland
# 
# This library is free software; you can redistribute it and/or
# modify it under the terms of the GNU Lesser General Public
# License as published by the Free Software Foundation; either
# version 2.1 of the License, or (at your option) any later version.
# 
# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Lesser General Public License for more details.
# 
# You should have received a copy of the GNU Lesser General Public
# License along with this library; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307  USA
#
# Author: Stian Soiland <stian@soiland.no>
# URL: http://forgetsql.sourceforge.net/
# License: LGPL
#



# __version__ should really come from setup.py.. hmm
__version__ = "0.5.2"

import sys
import forgetSQL

# backwards compatibility
try:
    True,False
except NameError:
    (True, False) = (1==1, 1==0)

# Taken from http://www.python.org/doc/current/lib/built-in-funcs.html
def my_import(name):
    mod = __import__(name)
    components = name.split('.')
    # Takes care of things like pyPgSQL.PgSQL
    for comp in components[1:]:
        mod = getattr(mod, comp)
    return mod 

      
def main():    
    try:
        # Should 
        from optparse import OptionParser
    except ImportError:
        print >>sys.stderr, "optik 1.4.1 or Python 2.3 or later needed for command line usage"
        print >>sys.stderr, "Download optik from http://optik.sourceforge.net/"
        print >>sys.stderr, "or upgrade Python."
        sys.exit(1)
    
    usage = """usage: %prog [options]
Generates Python code for using forgetSQL to access database tables.
You need to include a line-seperated list of table names to either
stdin or as a file using option --tables."""
    
    parser = OptionParser(version="%prog " + __version__, usage=usage)
    parser.add_option("-t", "--tables", dest="tables",
                      help="read list of tables from FILE instead of stdin",
                      metavar="FILE")        
    parser.add_option("-o", "--output", dest="output",
                      help="write generated code to OUTPUT instead of stdout")
    parser.add_option("-m", "--dbmodule", dest="dbmodule",
                      help="database module to use")
    parser.add_option("-H", "--host", dest="host",
                      help="hostname of database server")
    parser.add_option("-d", "--database", dest="database",
                      help="database to connect to")
    parser.add_option("-u", "--username", dest="username",
                      help="database username")
    parser.add_option("-p", "--password", dest="password",
                      help="database password")
    parser.add_option("-c", "--connect", dest="connect",
      help="database connect string (instead of host/database/user/password")

    (options, args) = parser.parse_args()
    if options.tables:
        try:
            file = open(options.tables)
        except IOError, e:
            print >>sys.stderr, "%s: %s" % (e.strerror, e.filename)
            sys.exit(2)
    else:
        file = sys.stdin        
    
    if options.output:
        try:
            # Override print.. dirty. 
            sys.stdout = open(output, "w")
        except IOError, e:
            print >>sys.stderr, "%s: %s" % (e.strerror, e.filename)
            sys.exit(3)
            
    if not options.dbmodule:
        print >>sys.stderr, "Missing required option --dbmodule"        
        parser.print_help(file=sys.stderr)
        sys.exit(4)
    
    try:
        dbmodule = my_import(options.dbmodule)    
    except ImportError:
        print >>sys.stderr, "Unknown database module", options.dbmodule
        sys.exit(5)
    
    if options.connect:
        connectstring = options.connect
        try:
            connection = dbmodule.connect(options.connect)   
        except Exception, e:
            print >>sys.stderr, "Could not connect to database using", \
                                options.connect
            sys.exit(6)
    else:
        params = {}
        if options.database:
            params['database'] = options.database
        else:
            print >>sys.stderr, "Missing required option --database or --connect"     
            sys.exit(7)
        if options.host:
            params['host'] = options.host    
        if options.username:
            params['user'] = options.username    
        if options.password:
            params['password'] = options.password    
        connectstring = ", ".join(["%s=%r" % (key, value)
                                  for (key,value) in params.items()
                           # filter out password for 'security reasons'
                                  if key != "password"])
        try:
            connection = dbmodule.connect(**params)
        except Exception, e:
            print >>sys.stderr, "Could not connect to database using", \
                                connectstring
            print >>sys.stderr, e      
            sys.exit(8)

    cursor = connection.cursor        
    tables = file.read().split()
    if not tables:
        print >>sys.stderr, "No table names supplied"
        sys.exit(9)
    # collect useful strings for generated code    
    code = {}    
    code['connect'] = connectstring
    code['module'] = options.dbmodule
    code['database'] = options.database or '(unknown)'
    forgetSQL.generateFromTables(tables, cursor, code=code)

if __name__=='__main__':
    main()
